name: Continuous Delivery

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:

permissions:
  contents: read
  packages: write

jobs:
  build:
    name: Build and Push Image
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tags: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=sha,format=long
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=tag
      - id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy_staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.ref == 'refs/heads/main'
    environment:
      name: staging
      url: ${{ vars.STAGING_URL }}
    steps:
      - name: Use pinned image digest
        run: |
          echo "Digest: ${{ needs.build.outputs.image-digest }}"
          echo "Tags:   ${{ needs.build.outputs.image-tags }}"
      - name: Deploy (provider TBD)
        run: |
          echo "Deploying to staging with digest ${{ needs.build.outputs.image-digest }}"
          # flyctl deploy --image ghcr.io/${{ github.repository }}@${{ needs.build.outputs.image-digest }} --app myapp-staging
          # gcloud run deploy myapp-staging --image ghcr.io/${{ github.repository }}@${{ needs.build.outputs.image-digest }} --region us-central1
      - uses: actions/checkout@v4
      - name: Health gate (wait for /livez)
        run: |
          set -e
          for i in $(seq 1 30); do
            if curl -sf "${{ vars.STAGING_URL }}/livez" > /dev/null; then echo "livez OK"; break; fi
            sleep 2
            if [ "$i" -eq 30 ]; then echo "livez did not become healthy"; exit 1; fi
          done
      - name: Smoke Gate
        run: |
          chmod +x scripts/smoke.sh
          API_URL="${{ vars.STAGING_URL }}" WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET }}" ./scripts/smoke.sh

  loadtest_gate:
    name: Load Test Gate (tags)
    runs-on: ubuntu-latest
    needs: [ build ]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4
      - name: Run load test against staging
        run: |
          node scripts/dedup-loadtest.mjs \
            --url "${{ vars.STAGING_URL }}" \
            --source demo \
            --tenant t1 \
            --total 100 \
            --unique 50 \
            --concurrency 10 \
            --out result.json
      - name: Verify dedup results
        run: |
          node scripts/check-loadtest-result.mjs result.json 100

  deploy_production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [ build, loadtest_gate ]
    if: startsWith(github.ref, 'refs/tags/v')
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    steps:
      - name: Use pinned digest (promotion)
        run: |
          echo "Promoting digest ${{ needs.build.outputs.image-digest }} to production"
          # flyctl deploy --image ghcr.io/${{ github.repository }}@${{ needs.build.outputs.image-digest }} --app myapp-prod
          # gcloud run deploy myapp-prod --image ghcr.io/${{ github.repository }}@${{ needs.build.outputs.image-digest }} --region us-central1
      - name: Post-deploy smoke
        run: |
          chmod +x scripts/smoke.sh
          API_URL="${{ vars.PRODUCTION_URL }}" WEBHOOK_SECRET="${{ secrets.WEBHOOK_SECRET }}" ./scripts/smoke.sh
